{"version":3,"sources":["models/cell-direction.ts","app/hooks.ts","models/snake.ts","errors/game-over.ts","models/area.ts","components/Area/Field/field-slice.ts","components/Area/Cell/Cell.tsx","components/Area/Field/field.tsx","components/Controller/Controller.tsx","components/Area/Field/game-slice.ts","components/Score/score-slice.ts","app/store.ts","utils/score-calculator.ts","utils/game-runner.ts","utils/snake-controller.ts","components/Score/Score.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CellDirection","useAppSelector","useSelector","Snake","body","Up","nextDirection","previousTail","this","headDirection","length","_","first","last","Down","Left","Right","isVertical","turnSnake","isHorizontal","append","toArray","turnedHead","turnHead","makeStep","undefined","tailDirection","skip","prepend","skipLast","direction","GameOver","message","Error","PositionComparator","second","entity","Area","height","width","args","snake","snakeCells","foodCells","snakePosition","rnd","Random","getSnakeCells","generateRandomFreeCell","nextCell","getNextSnakePosition","checkBounds","isSnakeCell","equals","snakeTail","move","isFoodCell","grow","where","cell","up","right","down","left","contains","next","position","x","y","coord","snakeNextDirection","coords","i","getNextSectionCoord","push","section","initialState","area","fieldSlice","createSlice","name","reducers","turnUp","state","turnRight","turnDown","turnLeft","tickField","tick","initField","actions","selectArea","field","selectIsSnakeCell","createSelector","selectSnakeLength","selectIsFoodCell","Cell","props","isSnakeSelector","isFoodSelector","isSnake","cellIndex","rowIndex","isFood","cellClasses","classNames","className","renderArray","range","select","Field","map","row","renderRow","Controller","onMouseDown","bind","onMouseMove","onMouseUp","merge","fromEvent","document","subscribe","e","screenX","touches","screenY","setState","xDiff","yDiff","Math","abs","onLeftMove","onRightMove","onDownMove","onUpMove","onTouchStart","React","Component","gameSlice","started","speed","gameOver","startGame","changeSpeed","action","payload","endGame","selectGameStarted","game","selectGameOvered","selectSpeed","scoreSlice","score","addScore","resetScore","selectScore","store","configureStore","reducer","areaReducer","gameReducer","scoreReducer","middleware","getDefaultMiddleware","serializableCheck","ScoreCalculator","RunnerUtils","getState","selectLength","GameRunner","utils","defaultPeriod","period","repeater","previousLength","dispatch","Repeater","iteration","start","run","newSpeed","chooseSpeed","changeScore","stop","init","getAdditionalScore","pow","kill","SnakeController","moves$","keyPress$","controllerChange$","Subject","dead$","subscribeToKeys","pipe","distinctUntilChanged","takeUntil","item","key","complete","Score","gameRunner","controller","App","useEffect","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"uJAAYA,E,kECKCC,EAAkDC,I,mEDLnDF,K,QAAAA,E,cAAAA,E,YAAAA,E,aAAAA,M,KEGL,IAAMG,EAAb,WAMI,aAA6H,IAA1GC,EAAyG,uDAAjF,CAACJ,EAAcK,IAAKC,EAA6D,uCAA9BC,EAA8B,gEAL5GH,UAK4G,OAM5GE,mBAN4G,OAO5GC,kBAP4G,EACxHC,KAAKJ,KAAOA,EACZI,KAAKF,cAAgBA,GAAiBE,KAAKC,cAC3CD,KAAKD,aAAoC,IAArBC,KAAKJ,KAAKM,OAAeF,KAAKC,cAAgBF,EAT1E,+CAeI,WACI,OAAOI,IAAEH,KAAKJ,MAAMQ,UAhB5B,yBAmBI,WACI,OAAOD,IAAEH,KAAKJ,MAAMS,SApB5B,kBAuBI,WACI,OAAOL,KAAKJ,KAAKM,SAxBzB,sBA2BI,WACI,OAAOF,KAAKC,gBAAkBT,EAAcK,IAAMG,KAAKC,gBAAkBT,EAAcc,OA5B/F,wBA+BI,WACI,OAAON,KAAKC,gBAAkBT,EAAce,MAAQP,KAAKC,gBAAkBT,EAAcgB,QAhCjG,gBAmCI,WACI,OAAIR,KAAKS,YAAcT,KAAKE,OAAS,EAC1BF,KACGA,KAAKU,UAAUlB,EAAcK,MAtCnD,mBAyCI,WACI,OAAIG,KAAKW,cAAgBX,KAAKE,OAAS,EAC5BF,KACGA,KAAKU,UAAUlB,EAAcgB,SA5CnD,kBA+CI,WACI,OAAIR,KAAKS,YAAcT,KAAKE,OAAS,EAC1BF,KACGA,KAAKU,UAAUlB,EAAcc,QAlDnD,kBAqDI,WACI,OAAIN,KAAKW,cAAgBX,KAAKE,OAAS,EAC5BF,KACGA,KAAKU,UAAUlB,EAAce,QAxDnD,kBA2DI,WAEI,OAAO,IAAIZ,EADKQ,IAAEH,KAAKJ,MAAMgB,OAAOZ,KAAKD,cAAcc,UAC7B,KAAMb,KAAKD,gBA7D7C,kBAgEI,WACI,IAAMe,EAAad,KAAKe,WAExB,OAAO,IAAIpB,EADKK,KAAKgB,SAASF,GAAYD,eAChBI,EAAWjB,KAAKkB,iBAnElD,sBAsEI,WACI,OAAOf,IAAEH,KAAKJ,MAAMuB,KAAK,GAAGC,QAAQpB,KAAKF,iBAvEjD,sBA0EI,SAAiBF,GACb,OAAOA,EAAKyB,SAAS,GAAGD,QAAQpB,KAAKF,iBA3E7C,uBA8EI,SAAkBwB,GACd,OAAO,IAAI3B,EAAMK,KAAKJ,KAAM0B,EAAWtB,KAAKD,kBA/EpD,K,wBCHawB,EAAb,kDACI,WAAmBC,GAAmB,uCAC5BA,GAFd,sBAA8BC,Q,QCcxBC,E,uFACF,SAAQtB,EAAiBuB,GACrB,OAAIvB,EAAM,GAAKuB,EAAO,GACX,EACAvB,EAAM,GAAKuB,EAAO,IACjB,EAEDvB,EAAM,GAAKuB,EAAO,K,oBAIjC,SAAOvB,EAAiBuB,GACpB,OAAOvB,EAAM,KAAOuB,EAAO,IAAMvB,EAAM,KAAOuB,EAAO,K,yBAGzD,SAAYC,GACR,OAAQA,EAAO,GAAK,OAASA,EAAO,GAAK,S,KAIpCC,EAAb,WAsBI,WAAmBC,EAAgBC,EAAeC,GAAkB,IAAD,+BArBnDF,YAqBmD,OApBnDC,WAoBmD,OAlBnDE,WAkBmD,OAhBnDC,gBAgBmD,OAf5DC,eAe4D,OAbnDC,mBAamD,OAXlDC,IAAc,IAAIC,SAY/BtC,KAAK8B,OAASA,EACd9B,KAAK+B,MAAQA,EAEb/B,KAAKiC,MAAL,iBAAaD,QAAb,IAAaA,OAAb,EAAaA,EAAMC,aAAnB,QAA4B,IAAItC,EAChCK,KAAKoC,cAAL,iBAAqBJ,QAArB,IAAqBA,OAArB,EAAqBA,EAAMI,qBAA3B,QAA4C,CACvCN,EAAS,EAAK,EACdC,EAAQ,EAAK,GAGlB/B,KAAKkC,WAAalC,KAAKuC,gBAEvBvC,KAAKmC,WAAgB,OAAJH,QAAI,IAAJA,GAAA,UAAAA,EAAMG,iBAAN,eAAiBjC,QAAS8B,EAAKG,UAAY,CAACnC,KAAKwC,0BAlC1E,oDAaI,WACI,OAAOxC,KAAKiC,MAAMnC,gBAd1B,qBAgBI,WACI,OAAOK,IAAEH,KAAKkC,YAAY7B,SAjBlC,kBAqCI,WACI,IAAMoC,EAAWzC,KAAK0C,uBAEtB,IAAK1C,KAAK2C,YAAYF,GAClB,MAAM,IAAIlB,EAAS,yBAGvB,GAAIvB,KAAK4C,YAAYH,MAAc,IAAIf,GAAqBmB,OAAOJ,EAAUzC,KAAK8C,WAC9E,MAAM,IAAIvB,EAAS,wBAGvB,IAAIU,EAAQjC,KAAKiC,MASjB,OARAA,EAAQA,EAAMc,OAEV/C,KAAKgD,WAAWP,KAChBR,EAAQA,EAAMgB,OAEdjD,KAAKmC,UAAYhC,IAAEH,KAAKmC,WAAWe,OAAM,SAACC,GAAD,QAAW,IAAIzB,GAAqBmB,OAAOJ,EAAUU,MAAOtC,WAGlG,IAAIgB,EACP7B,KAAK8B,OACL9B,KAAK+B,MACL,CACIE,MAAOA,EACPG,cAAeK,EACfN,UAAWnC,KAAKmC,cA/DhC,oBAoEI,WACI,OAAO,IAAIN,EACP7B,KAAK8B,OACL9B,KAAK+B,MACL,CACIE,MAAOjC,KAAKiC,MAAMmB,KAClBhB,cAAepC,KAAKoC,cACpBD,UAAWnC,KAAKmC,cA3EhC,uBAgFI,WACI,OAAO,IAAIN,EACP7B,KAAK8B,OACL9B,KAAK+B,MACL,CACIE,MAAOjC,KAAKiC,MAAMoB,QAClBjB,cAAepC,KAAKoC,cACpBD,UAAWnC,KAAKmC,cAvFhC,sBA4FI,WACI,OAAO,IAAIN,EACP7B,KAAK8B,OACL9B,KAAK+B,MACL,CACIE,MAAOjC,KAAKiC,MAAMqB,OAClBlB,cAAepC,KAAKoC,cACpBD,UAAWnC,KAAKmC,cAnGhC,sBAwGI,WACI,OAAO,IAAIN,EACP7B,KAAK8B,OACL9B,KAAK+B,MACL,CACIE,MAAOjC,KAAKiC,MAAMsB,OAClBnB,cAAepC,KAAKoC,cACpBD,UAAWnC,KAAKmC,cA/GhC,yBAoHI,SAAmBgB,GACf,OAAQhD,IAAEH,KAAKkC,YAAYsB,SAASL,EAAM,IAAIzB,KArHtD,wBAwHI,SAAkByB,GACd,OAAQhD,IAAEH,KAAKmC,WAAWqB,SAASL,EAAM,IAAIzB,KAzHrD,oCA4HI,WACI,IAAIyB,EAAiB,KAErB,EAAG,CAICA,EAAO,CAHGnD,KAAKqC,IAAIoB,KAAKzD,KAAK+B,OACnB/B,KAAKqC,IAAIoB,KAAKzD,KAAK8B,eAGxB9B,KAAK4C,YAAYO,IAE1B,OAAOA,IAtIf,yBAyII,SAAmBO,GACf,kBAAeA,EAAf,GAAOC,EAAP,KAAUC,EAAV,KACA,QAAID,EAAI,GAAKA,GAAK3D,KAAK+B,UAEZ6B,EAAI,GAAKA,GAAK5D,KAAK8B,UA7ItC,kCAoJI,WACI,IAAM+B,EAAQ7D,KAAKoC,cAEnB,OAAQpC,KAAK8D,oBACT,KAAKtE,EAAcK,GAAI,MAAO,CAACgE,EAAM,GAAIA,EAAM,GAAK,GACpD,KAAKrE,EAAcgB,MAAO,MAAO,CAACqD,EAAM,GAAK,EAAGA,EAAM,IACtD,KAAKrE,EAAcc,KAAM,MAAO,CAACuD,EAAM,GAAIA,EAAM,GAAK,GACtD,KAAKrE,EAAce,KAAM,MAAO,CAACsD,EAAM,GAAK,EAAGA,EAAM,OA3JjE,2BA+JI,WAKI,IAJA,IAAME,EAAS,CAAC/D,KAAKoC,eAEjB/B,EAAOL,KAAKoC,cAEP4B,EAAI,EAAGA,EAAIhE,KAAKiC,MAAMrC,KAAKM,OAAQ8D,IACxC3D,EAAOL,KAAKiE,oBAAoB5D,EAAML,KAAKiC,MAAMrC,KAAKoE,IACtDD,EAAOG,KAAK7D,GAGhB,OAAO0D,IAzKf,iCA4KI,SAA4BF,EAAiBM,GACzC,OAAQA,GACJ,KAAK3E,EAAcK,GAAI,MAAO,CAACgE,EAAM,GAAIA,EAAM,GAAK,GACpD,KAAKrE,EAAcgB,MAAO,MAAO,CAACqD,EAAM,GAAK,EAAGA,EAAM,IACtD,KAAKrE,EAAcc,KAAM,MAAO,CAACuD,EAAM,GAAIA,EAAM,GAAK,GACtD,KAAKrE,EAAce,KAAM,MAAO,CAACsD,EAAM,GAAK,EAAGA,EAAM,SAjLjE,KC1BMO,EAA2B,CAC7BC,KAAM,IAAIxC,EAAK,GAAI,KAKVyC,EAAaC,YAAY,CAClCC,KAAM,QACNJ,eAEAK,SAAU,CACNC,OAAQ,SAACC,GACLA,EAAMN,KAAOM,EAAMN,KAAKK,UAE5BE,UAAW,SAACD,GACRA,EAAMN,KAAOM,EAAMN,KAAKO,aAE5BC,SAAU,SAACF,GACPA,EAAMN,KAAOM,EAAMN,KAAKQ,YAE5BC,SAAU,SAACH,GACPA,EAAMN,KAAOM,EAAMN,KAAKS,YAE5BC,UAAW,SAACJ,GACRA,EAAMN,KAAOM,EAAMN,KAAKW,QAE5BC,UAAW,SAAAN,GACPA,EAAMN,KAAO,IAAIxC,EAAK,GAAI,QAM/B,EAAwEyC,EAAWY,QAA3ER,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,UAAWC,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,SAAUC,EAA/C,EAA+CA,UAAWE,EAA1D,EAA0DA,UAGpDE,EAAa,SAACR,GAAD,OAAsBA,EAAMS,MAAMf,MAE/CgB,EAAoBC,YAC7BH,GACA,SAACd,GAAD,OAAgB,SAACX,GAAD,OAAgCW,EAAKzB,YAAYc,OAGxD6B,EAAoBD,YAC7BH,GACA,SAACd,GAAD,OAAgBA,EAAKpC,MAAMrC,KAAKM,UAGvBsF,EAAmBF,YAC5BH,GACA,SAACd,GAAD,OAAgB,SAACX,GAAD,OAAgCW,EAAKrB,WAAWU,OAGrDY,IAAf,Q,OCnDe,SAASmB,EAAKC,GACzB,IAAOC,EAAkBlG,EAAe4F,GACjCO,EAAiBnG,EAAe+F,GAEjCK,EAAUF,EAAgB,CAACD,EAAMI,UAAWJ,EAAMK,WAClDC,EAASJ,EAAe,CAACF,EAAMI,UAAWJ,EAAMK,WAEhDE,EAAcC,IAAW,CAC3B,YAAY,EACZ,aAAcL,EACd,YAAaG,IAGjB,OACI,qBAAKG,UAAWF,EAAhB,e,WCnBFG,EAAcjG,IAAEkG,MAAM,EAAG,IAAIC,QAAO,kBAAMnG,IAAEkG,MAAM,EAAG,IAAIxF,aAAWA,UAQ3D,SAAS0F,IACpB,OACI,qBAAKJ,UAAU,YAAf,SAEQC,EAAYI,KAAI,SAACC,EAAKV,GAAN,OAVhC,SAAmBU,EAAiBV,GAChC,OAAOU,EAAID,KAAI,SAACrD,EAAM2C,GAAP,OACX,cAACL,EAAD,CAAMM,SAAUA,EAAUD,UAAWA,OAQMY,CAAUD,EAAKV,Q,uCCC7CY,E,kDAEjB,WAAYjB,GAAe,IAAD,8BACtB,cAAMA,IAEDf,MAAQ,CACThB,EAAG,KACHC,EAAG,KACHtC,UAAW,MAGf,EAAKsF,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBAXK,E,qDAc1B,WAA4B,IAAD,OACvBG,YACIC,YAAUC,SAAU,WACpBD,YAAUC,SAAU,aACtBC,WAAU,SAACC,GAAD,OAAO,EAAKL,eAExBC,YACIC,YAAUC,SAAU,aACpBD,YAAUC,SAAU,cACtBC,WAAU,SAACC,GAAD,OAAO,EAAKN,YAAYM,Q,yBAGxC,SAAmBA,GAAS,IAAD,IACjBzD,EAAC,UAAGyD,EAAEC,eAAL,QAAgBD,EAAEE,QAAQ,GAAGD,QAC9BzD,EAAC,UAAGwD,EAAEG,eAAL,QAAgBH,EAAEE,QAAQ,GAAGC,QAEpCvH,KAAKwH,UAAS,iBAAO,CAAE7D,IAAGC,U,yBAG9B,SAAmBwD,GAAS,IAAD,IACvB,EAAiBpH,KAAK2E,MAAdhB,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAEX,GAAKD,GAAMC,EAAX,CAEA,IAGM6D,EAAQ9D,GAHD,UAAGyD,EAAEC,eAAL,QAAgBD,EAAEE,QAAQ,GAAGD,SAIpCK,EAAQ9D,GAHD,UAAGwD,EAAEG,eAAL,QAAgBH,EAAEE,QAAQ,GAAGC,SAKtCI,KAAKC,IAAIH,GAASE,KAAKC,IAAIF,IAAUD,EAAQ,GAC7CzH,KAAK0F,MAAMmC,aACX7H,KAAKwH,UAAS,iBAAO,CAAElG,UAAW,YAC3BqG,KAAKC,IAAIH,GAASE,KAAKC,IAAIF,IAAUD,EAAQ,GACpDzH,KAAK0F,MAAMoC,cACX9H,KAAKwH,UAAS,iBAAO,CAAElG,UAAW,aAC3BqG,KAAKC,IAAIH,GAASE,KAAKC,IAAIF,IAAUA,EAAQ,GACpD1H,KAAK0F,MAAMqC,aACX/H,KAAKwH,UAAS,iBAAO,CAAElG,UAAW,YAC3BqG,KAAKC,IAAIH,GAASE,KAAKC,IAAIF,IAAUA,EAAQ,IACpD1H,KAAK0F,MAAMsC,WACXhI,KAAKwH,UAAS,iBAAO,CAAElG,UAAW,a,uBAI1C,WACItB,KAAKwH,UAAS,iBAAO,CAAE7D,EAAG,KAAMC,EAAG,KAAMtC,UAAW,W,oBAGxD,WACI,OACI,sBACI6E,UAAWD,IAAW,iBAAkBlG,KAAK2E,MAAMrD,WADvD,UAGI,qBAAK6E,UAAU,oCAAf,eACA,qBAAKA,UAAU,sCAAf,eACA,qBAAKA,UAAU,uCAAf,eACA,qBAAKA,UAAU,qCAAf,eACA,qBAAKA,UAAU,qCAAf,SACI,qBAAKA,UAAU,iCACVS,YAAa5G,KAAK4G,YAClBqB,aAAcjI,KAAK4G,YAFxB,wB,GA3EoBsB,IAAMC,WCHjCC,EAAY7D,YAAY,CACjCC,KAAM,OACNJ,aAR4B,CAC5BiE,SAAS,EACTC,MAAO,KACPC,SAAU,MAOV9D,SAAU,CACN+D,UAAW,SAAC7D,GACRA,EAAM0D,SAAU,EAChB1D,EAAM2D,MAAQ,EACd3D,EAAM4D,SAAW,MAErBE,YAAa,SAAC9D,EAAO+D,GACjB/D,EAAM2D,MAAQI,EAAOC,SAEzBC,QAAS,SAACjE,EAAO+D,GACb/D,EAAM0D,SAAU,EAChB1D,EAAM2D,MAAQ,KACd3D,EAAM4D,SAAWG,EAAOC,YAM7B,EAA4CP,EAAUlD,QAA9CsD,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,YAAaG,EAAhC,EAAgCA,QAE1BC,GAAoB,SAAClE,GAAD,OAAsBA,EAAMmE,KAAKT,SAErDU,GAAmB,SAACpE,GAAD,OAAsBA,EAAMmE,KAAKP,UAEpDS,GAAc,SAACrE,GAAD,OAAsBA,EAAMmE,KAAKR,OAE7CF,KAAf,QClCaa,GAAa1E,YAAY,CAClCC,KAAM,QACNJ,aAN6B,CAC7B8E,MAAO,GAMPzE,SAAU,CACN0E,SAAU,SAACxE,EAAmB+D,GAC1B/D,EAAMuE,OAASR,EAAOC,SAE1BS,WAAY,SAAAzE,GACRA,EAAMuE,MAAQ,MAKnB,GAAiCD,GAAW/D,QAApCiE,GAAR,GAAQA,SAAUC,GAAlB,GAAkBA,WAEZC,GAAc,SAAC1E,GAAD,OAAsBA,EAAMuE,MAAMA,OAE9CD,MAAf,QCvBaK,GAAQC,YAAe,CAClCC,QAAS,CACPpE,MAAOqE,EACPX,KAAMY,GACNR,MAAOS,IAETC,WAAY,SAAAC,GAAoB,OAAIA,EAAqB,CACvDC,mBAAmB,OCZVC,GAAb,kGACI,SAA0BzB,GACtB,OAAe,GAARA,MAFf,KCQa0B,GAAb,4FACI,WACI,OAAOV,GAAMW,WAAW7E,MAAMf,KAAKpC,MAAMrC,KAAKM,SAFtD,yBAKI,WACI,OAAOoJ,GAAMW,WAAWnB,KAAKR,QANrC,yBASI,WAGI,OAAO,GAFQtI,KAAKkK,eAEE,EAAK,OAZnC,KAgBaC,GAAb,iDACWC,MAAqB,IAAIJ,GADpC,KAGoBK,cAAgB,IAHpC,KAKWC,OAAiB,KAL5B,KAOWC,SAAqB,KAPhC,KASWC,eAAyB,KATpC,wCAWI,WACIlB,GAAMmB,SAASxF,KACfqE,GAAMmB,SAASrB,MACfpJ,KAAKwK,eAAiBxK,KAAKoK,MAAMF,iBAdzC,iBAiBI,WAAoB,IAAD,SACflK,KAAKuK,SAAW,IAAIG,YAAS,kBAAM,EAAKC,cAAxB,UAAqC3K,KAAKsK,cAA1C,QAAoDtK,KAAKqK,eAAeO,UAlBhG,uBAqBI,WACItB,GAAMmB,SAASjC,KACfxI,KAAK6K,QAvBb,uBA0BI,WACI,IAAMvC,EAAQtI,KAAKoK,MAAMpB,cACnB8B,EAAW9K,KAAKoK,MAAMW,cACtB7K,EAASF,KAAKoK,MAAMF,eAEtBlK,KAAKwK,iBAAmBtK,GACxBF,KAAKgL,YAAY1C,GAEjBA,IAAUwC,GACV9K,KAAKyI,YAAYqC,GAGrB9K,KAAKwK,eAAiBtK,EAEtB,IACIoJ,GAAMmB,SAAS1F,KACjB,MAAOqC,GACDA,aAAa7F,IACb+H,GAAMmB,SAAS7B,EAAQxB,EAAE5F,UACzBxB,KAAKiL,OACLjL,KAAKkL,WA9CrB,yBAmDI,SAAmB5C,GACf,IAAMY,GAAQ,IAAIa,IAAkBoB,mBAAmB7C,GACvDgB,GAAMmB,SAAStB,GAASD,MArDhC,yBAwDI,SAAmB4B,GACf9K,KAAKiL,OACLjL,KAAKsK,OAAS3C,KAAKyD,IAAI,GAAKN,GAAY9K,KAAKqK,cAC7Cf,GAAMmB,SAAShC,EAAYqC,IAC3B9K,KAAK6K,QA5Db,kBA+DI,WACI7K,KAAKuK,SAASc,WAhEtB,K,uCClBaC,GAAb,iDACWC,YADX,OAGYC,eAHZ,OAIYC,kBAAoB,IAAIC,KAJpC,KAMYC,MAAQ,IAAID,KANxB,wCAQI,WACI1L,KAAKwL,UAAYxL,KAAK4L,kBAEtB5L,KAAKuL,OAASvE,YACVhH,KAAKwL,UACLxL,KAAKyL,mBACPI,KACEC,cAAqB,SAAC1L,EAAOuB,GAAR,OAAmBvB,IAAUuB,KAClDoK,aAAU/L,KAAK2L,QAGnB3L,KAAKuL,OAAOpE,WAAU,SAAC7F,GACnB,OAAQA,GACJ,KAAK9B,EAAcK,GACfyJ,GAAMmB,SAAS/F,KACf,MAEJ,KAAKlF,EAAcc,KACfgJ,GAAMmB,SAAS5F,KACf,MAEJ,KAAKrF,EAAcgB,MACf8I,GAAMmB,SAAS7F,KACf,MAEJ,KAAKpF,EAAce,KACf+I,GAAMmB,SAAS3F,WAlCnC,6BAyCI,WACI,OAAOmC,YAAyBC,SAAU,WAAW2E,KACjDrF,cAAI,SAAAwF,GAAI,OAAIA,EAAKC,OACjBzF,cAAI,SAAAwF,GACA,OAAQA,GACJ,IAAK,UACD,OAAOxM,EAAcK,GACzB,IAAK,YACD,OAAOL,EAAcc,KACzB,IAAK,aACD,OAAOd,EAAcgB,MACzB,IAAK,YACD,OAAOhB,EAAce,YArD7C,oBA2DI,WACIP,KAAKyL,kBAAkBhI,KAAKjE,EAAcK,MA5DlD,uBA+DI,WACIG,KAAKyL,kBAAkBhI,KAAKjE,EAAcgB,SAhElD,sBAmEI,WACIR,KAAKyL,kBAAkBhI,KAAKjE,EAAcc,QApElD,sBAuEI,WACIN,KAAKyL,kBAAkBhI,KAAKjE,EAAce,QAxElD,yBA2EI,WACIP,KAAK2L,MAAMlI,OACXzD,KAAK2L,MAAMO,eA7EnB,KCAe,SAASC,KACpB,IAAMjD,EAAQzJ,EAAe4J,IACvBnJ,EAAST,EAAe8F,GACxB+C,EAAQ7I,EAAeuJ,IAE7B,OACI,sBAAK7C,UAAU,YAAf,UACI,sBAAKA,UAAU,aAAf,UACI,uBAAOA,UAAU,qBAAjB,mBAGA,qBAAKA,UAAU,oBAAf,SACK+C,OAGT,sBAAK/C,UAAU,mBAAf,UACI,uBAAOA,UAAU,2BAAjB,mBAGA,qBAAKA,UAAU,0BAAf,SACKmC,OAGT,sBAAKnC,UAAU,oBAAf,UACI,uBAAOA,UAAU,4BAAjB,oBAGA,qBAAKA,UAAU,2BAAf,SACKjG,UCzBrB,IAAMkM,GAAa,IAAIjC,GACjBkC,GAAa,IAAIf,GA6CRgB,OA3Cf,WACIC,qBAAU,WACNF,GAAWnB,UAGf,IAAM7C,EAAU5I,EAAeoJ,IACzBN,EAAW9I,EAAesJ,IAChC,OACI,sBAAK5C,UAAU,MAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,cAACI,EAAD,IAEI8B,EAAU,cAAC8D,GAAD,IAAW,QAIxB9D,EAUG,cAAC,EAAD,CACIL,SAAU,kBAAMqE,GAAW3H,UAC3BoD,YAAa,kBAAMuE,GAAWzH,aAC9BmD,WAAY,kBAAMsE,GAAWxH,YAC7BgD,WAAY,kBAAMwE,GAAWvH,cAbjC,wBACIqB,UAAU,aACVqG,QAAS,WACLJ,GAAW5D,aAHnB,mBAkBJD,EACI,+BAAOA,IACP,SCrCAkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU1D,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGNpC,SAAS+F,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAMjM,a","file":"static/js/main.b23334eb.chunk.js","sourcesContent":["export enum CellDirection {\n    Up = 'Up',\n    Right = 'Right',\n    Down = 'Down',\n    Left = 'Left',\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { AppDispatch, RootState } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { CellDirection } from './cell-direction';\nimport _, { ISequence } from 'declarray';\n\nexport class Snake {\n    public readonly body: CellDirection[];\n\n    public constructor();\n    public constructor(body: CellDirection[]);\n    public constructor(body: CellDirection[], nextDirection: CellDirection, previousTail: CellDirection);\n    public constructor(body: CellDirection[] = [CellDirection.Up], nextDirection?: CellDirection, previousTail?: CellDirection) {\n        this.body = body;\n        this.nextDirection = nextDirection || this.headDirection;\n        this.previousTail = this.body.length === 1 ? this.headDirection : previousTail;\n    }\n\n    public readonly nextDirection: CellDirection;\n    public readonly previousTail: CellDirection;\n\n    public get headDirection(): CellDirection {\n        return _(this.body).first();\n    }\n\n    public get tailDirection(): CellDirection {\n        return _(this.body).last();\n    }\n\n    public get length(): number {\n        return this.body.length;\n    }\n\n    public get isVertical(): boolean {\n        return this.headDirection === CellDirection.Up || this.headDirection === CellDirection.Down;\n    }\n\n    public get isHorizontal(): boolean {\n        return this.headDirection === CellDirection.Left || this.headDirection === CellDirection.Right;\n    }\n\n    public up(): Snake {\n        if (this.isVertical && this.length > 1) {\n            return this;\n        } else return this.turnSnake(CellDirection.Up)\n    }\n\n    public right(): Snake {\n        if (this.isHorizontal && this.length > 1) {\n            return this;\n        } else return this.turnSnake(CellDirection.Right)\n    }\n\n    public down(): Snake {\n        if (this.isVertical && this.length > 1) {\n            return this;\n        } else return this.turnSnake(CellDirection.Down)\n    }\n\n    public left(): Snake {\n        if (this.isHorizontal && this.length > 1) {\n            return this;\n        } else return this.turnSnake(CellDirection.Left)\n    }\n\n    public grow(): Snake {\n        const newBody = _(this.body).append(this.previousTail).toArray();\n        return new Snake(newBody, null, this.previousTail);\n    }\n\n    public move(): Snake {\n        const turnedHead = this.turnHead()\n        const newBody = this.makeStep(turnedHead).toArray();\n        return new Snake(newBody, undefined, this.tailDirection);\n    }\n\n    private turnHead(): ISequence<CellDirection> {\n        return _(this.body).skip(1).prepend(this.nextDirection);\n    }\n\n    private makeStep(body: ISequence<CellDirection>): ISequence<CellDirection> {\n        return body.skipLast(1).prepend(this.nextDirection);\n    }\n\n    private turnSnake(direction: CellDirection): Snake {\n        return new Snake(this.body, direction, this.previousTail);\n    }\n}\n","export class GameOver extends Error {\n    public constructor(message?: string) {\n        super(message);\n    }\n}\n","import { Snake } from './snake';\nimport { CellDirection } from './cell-direction';\nimport _, { IEqualityComparator } from 'declarray';\nimport { GameOver } from '../errors/game-over';\nimport { Random } from 'essents';\n\ndeclare type Position = [number, number];\n\ninterface AreaArgs {\n    snake?: Snake;\n    snakePosition?: Position;\n    foodCells?: Position[];\n}\n\nclass PositionComparator implements IEqualityComparator<Position> {\n    compare(first: Position, second: Position): number {\n        if (first[0] > second[0]) {\n            return 1;\n        } else if (first[0] < second[0]) {\n            return -1;\n        } else {\n            return first[1] - second[1];\n        }\n    }\n\n    equals(first: Position, second: Position): boolean {\n        return first[0] === second[0] && first[1] === second[1];\n    }\n\n    getHashCode(entity: Position): number {\n        return (entity[0] + 1024) * (entity[1] + 512)\n    }\n}\n\nexport class Area {\n    public readonly height: number;\n    public readonly width: number;\n\n    public readonly snake: Snake;\n\n    public readonly snakeCells: Position[];\n    public foodCells: Position[];\n\n    public readonly snakePosition: Position;\n\n    private readonly rnd: Random = new Random();\n\n    private get snakeNextDirection(): CellDirection {\n        return this.snake.nextDirection;\n    }\n    private get snakeTail(): Position {\n        return _(this.snakeCells).last();\n    }\n\n    public constructor(height: number, width: number);\n    public constructor(height: number, width: number, args: AreaArgs);\n    public constructor(height: number, width: number, args?: AreaArgs) {\n        this.height = height;\n        this.width = width;\n\n        this.snake = args?.snake ?? new Snake();\n        this.snakePosition = args?.snakePosition ?? [\n            (height / 2) | 0,\n            (width / 2) | 0,\n        ];\n\n        this.snakeCells = this.getSnakeCells();\n\n        this.foodCells = args?.foodCells?.length ? args.foodCells : [this.generateRandomFreeCell()];\n    }\n\n    public tick(): Area {\n        const nextCell = this.getNextSnakePosition();\n\n        if (!this.checkBounds(nextCell)) {\n            throw new GameOver('You break area beyond');\n        }\n\n        if (this.isSnakeCell(nextCell) && !new PositionComparator().equals(nextCell, this.snakeTail)) {\n            throw new GameOver('You did eat yourself');\n        }\n\n        let snake = this.snake;\n        snake = snake.move();\n\n        if (this.isFoodCell(nextCell)) {\n            snake = snake.grow();\n\n            this.foodCells = _(this.foodCells).where((cell) => !new PositionComparator().equals(nextCell, cell)).toArray();\n        }\n\n        return new Area(\n            this.height,\n            this.width,\n            {\n                snake: snake,\n                snakePosition: nextCell,\n                foodCells: this.foodCells,\n            }\n        )\n    }\n\n    public turnUp(): Area {\n        return new Area(\n            this.height,\n            this.width,\n            {\n                snake: this.snake.up(),\n                snakePosition: this.snakePosition,\n                foodCells: this.foodCells,\n            }\n        )\n    }\n\n    public turnRight(): Area {\n        return new Area(\n            this.height,\n            this.width,\n            {\n                snake: this.snake.right(),\n                snakePosition: this.snakePosition,\n                foodCells: this.foodCells,\n            }\n        )\n    }\n\n    public turnDown(): Area {\n        return new Area(\n            this.height,\n            this.width,\n            {\n                snake: this.snake.down(),\n                snakePosition: this.snakePosition,\n                foodCells: this.foodCells,\n            }\n        )\n    }\n\n    public turnLeft(): Area {\n        return new Area(\n            this.height,\n            this.width,\n            {\n                snake: this.snake.left(),\n                snakePosition: this.snakePosition,\n                foodCells: this.foodCells,\n            }\n        )\n    }\n\n    public isSnakeCell(cell: Position): boolean {\n        return  _(this.snakeCells).contains(cell, new PositionComparator());\n    }\n\n    public isFoodCell(cell: Position): boolean {\n        return  _(this.foodCells).contains(cell, new PositionComparator());\n    }\n\n    public generateRandomFreeCell(): Position {\n        let cell: Position = null;\n\n        do {\n            const x = this.rnd.next(this.width);\n            const y = this.rnd.next(this.height);\n\n            cell = [x, y];\n        } while (this.isSnakeCell(cell))\n\n        return cell;\n    }\n\n    public checkBounds(position: Position): boolean {\n        const [x, y] = position;\n        if (x < 0 || x >= this.width) {\n            return false;\n        } else if (y < 0 || y >= this.height) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public getNextSnakePosition(): Position {\n        const coord = this.snakePosition;\n\n        switch (this.snakeNextDirection) {\n            case CellDirection.Up: return [coord[0], coord[1] - 1];\n            case CellDirection.Right: return [coord[0] + 1, coord[1]];\n            case CellDirection.Down: return [coord[0], coord[1] + 1];\n            case CellDirection.Left: return [coord[0] - 1, coord[1]];\n        }\n    }\n\n    public getSnakeCells(): Position[] {\n        const coords = [this.snakePosition];\n\n        let last = this.snakePosition;\n\n        for (let i = 1; i < this.snake.body.length; i++) {\n            last = this.getNextSectionCoord(last, this.snake.body[i]);\n            coords.push(last);\n        }\n\n        return coords;\n    }\n\n    private getNextSectionCoord(coord: Position, section: CellDirection): Position {\n        switch (section) {\n            case CellDirection.Up: return [coord[0], coord[1] + 1];\n            case CellDirection.Right: return [coord[0] - 1, coord[1]];\n            case CellDirection.Down: return [coord[0], coord[1] - 1];\n            case CellDirection.Left: return [coord[0] + 1, coord[1]];\n        }\n    }\n}\n","import { createSelector, createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../../app/store';\nimport { Area } from '../../../models/area';\n\nexport interface FieldState {\n    area: Area,\n}\n\nconst initialState: FieldState = {\n    area: new Area(31, 31),\n};\n\n\n// Slice configuration\nexport const fieldSlice = createSlice({\n    name: 'field',\n    initialState,\n\n    reducers: {\n        turnUp: (state) => {\n            state.area = state.area.turnUp();\n        },\n        turnRight: (state) => {\n            state.area = state.area.turnRight();\n        },\n        turnDown: (state) => {\n            state.area = state.area.turnDown();\n        },\n        turnLeft: (state) => {\n            state.area = state.area.turnLeft();\n        },\n        tickField: (state) => {\n            state.area = state.area.tick();\n        },\n        initField: state => {\n            state.area = new Area(31, 31);\n        }\n    },\n});\n\n// Actions block\nexport const { turnUp, turnRight, turnDown, turnLeft, tickField, initField } = fieldSlice.actions;\n\n// Selectors\nexport const selectArea = (state: RootState) => state.field.area;\n\nexport const selectIsSnakeCell = createSelector(\n    selectArea,\n    (area: Area) => (position: [number, number]) => area.isSnakeCell(position)\n);\n\nexport const selectSnakeLength = createSelector(\n    selectArea,\n    (area: Area) => area.snake.body.length,\n);\n\nexport const selectIsFoodCell = createSelector(\n    selectArea,\n    (area: Area) => (position: [number, number]) => area.isFoodCell(position)\n);\n\nexport default fieldSlice.reducer;\n","import React from 'react';\nimport { useAppSelector } from '../../../app/hooks';\nimport classNames from 'classnames';\nimport { selectIsFoodCell, selectIsSnakeCell } from '../Field/field-slice';\n\ninterface Props {\n    rowIndex: number;\n    cellIndex: number;\n}\n\nexport default function Cell(props: Props) {\n    const  isSnakeSelector = useAppSelector(selectIsSnakeCell);\n    const  isFoodSelector = useAppSelector(selectIsFoodCell);\n\n    const isSnake = isSnakeSelector([props.cellIndex, props.rowIndex]);\n    const isFood = isFoodSelector([props.cellIndex, props.rowIndex]);\n\n    const cellClasses = classNames({\n        'app-cell': true,\n        'snake-cell': isSnake,\n        'food-cell': isFood,\n    });\n\n    return (\n        <div className={cellClasses}> </div>\n    )\n}\n","import React from 'react';\nimport _ from 'declarray';\nimport Cell from '../Cell/Cell';\nimport './field.scss';\n\nconst renderArray = _.range(0, 30).select(() => _.range(0, 30).toArray()).toArray();\n\nfunction renderRow(row: Array<any>, rowIndex: number) {\n    return row.map((cell, cellIndex) => (\n        <Cell rowIndex={rowIndex} cellIndex={cellIndex}/>\n    ));\n}\n\nexport default function Field() {\n    return (\n        <div className=\"app-field\">\n            {\n                renderArray.map((row, rowIndex) => renderRow(row, rowIndex))\n            }\n        </div>\n    )\n}\n","import React from 'react';\nimport './Controller.scss';\nimport classNames from 'classnames';\nimport { fromEvent, merge } from 'rxjs';\n\ninterface State {\n    x: number;\n    y: number;\n    direction: string;\n}\n\ninterface Props {\n    onUpMove: () => void;\n    onRightMove: () => void;\n    onDownMove: () => void;\n    onLeftMove: () => void;\n}\n\nexport default class Controller extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            x: null,\n            y: null,\n            direction: null,\n        }\n\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.onMouseUp = this.onMouseUp.bind(this);\n    }\n\n    public componentDidMount() {\n        merge(\n            fromEvent(document, 'mouseup'),\n            fromEvent(document, 'touchend'),\n        ).subscribe((e) => this.onMouseUp());\n\n        merge(\n            fromEvent(document, 'mousemove'),\n            fromEvent(document, 'touchmove'),\n        ).subscribe((e) => this.onMouseMove(e as any));\n    }\n\n    public onMouseDown(e: any) {\n        const x = e.screenX ?? e.touches[0].screenX\n        const y = e.screenY ?? e.touches[0].screenY\n\n        this.setState(() => ({ x, y }))\n    }\n\n    public onMouseMove(e: any) {\n        const { x, y } = this.state;\n\n        if (!x || !y) return;\n\n        const screenX = e.screenX ?? e.touches[0].screenX\n        const screenY = e.screenY ?? e.touches[0].screenY\n\n        const xDiff = x - screenX;\n        const yDiff = y - screenY;\n\n        if (Math.abs(xDiff) > Math.abs(yDiff) && xDiff > 0) {\n            this.props.onLeftMove();\n            this.setState(() => ({ direction: 'left' }));\n        } else if (Math.abs(xDiff) > Math.abs(yDiff) && xDiff < 0) {\n            this.props.onRightMove();\n            this.setState(() => ({ direction: 'right' }));\n        } else if (Math.abs(xDiff) < Math.abs(yDiff) && yDiff < 0) {\n            this.props.onDownMove();\n            this.setState(() => ({ direction: 'down' }));\n        } else if (Math.abs(xDiff) < Math.abs(yDiff) && yDiff > 0) {\n            this.props.onUpMove();\n            this.setState(() => ({ direction: 'up' }));\n        }\n    }\n\n    public onMouseUp() {\n        this.setState(() => ({ x: null, y: null, direction: null }))\n    }\n\n    render() {\n        return (\n            <div\n                className={classNames(\"app-controller\", this.state.direction)}\n            >\n                <div className=\"app-controller__top arrow control\"> </div>\n                <div className=\"app-controller__right arrow control\"> </div>\n                <div className=\"app-controller__bottom arrow control\"> </div>\n                <div className=\"app-controller__left arrow control\"> </div>\n                <div className=\"app-controller__cursor-placeholder\">\n                    <div className=\"app-controller__cursor control\"\n                         onMouseDown={this.onMouseDown}\n                         onTouchStart={this.onMouseDown}\n                    > </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../../app/store';\n\nexport interface GameState {\n    started: boolean,\n    speed: number,\n    gameOver: string,\n}\n\nconst initialState: GameState = {\n    started: false,\n    speed: null,\n    gameOver: null,\n};\n\nexport const gameSlice = createSlice({\n    name: 'game',\n    initialState,\n\n    reducers: {\n        startGame: (state) => {\n            state.started = true;\n            state.speed = 1;\n            state.gameOver = null;\n        },\n        changeSpeed: (state, action: PayloadAction<number>) => {\n            state.speed = action.payload;\n        },\n        endGame: (state, action: PayloadAction<string>) => {\n            state.started = false;\n            state.speed = null;\n            state.gameOver = action.payload;\n        },\n    },\n});\n\n// Actions block\nexport const { startGame, changeSpeed, endGame } = gameSlice.actions;\n\nexport const selectGameStarted = (state: RootState) => state.game.started;\n\nexport const selectGameOvered = (state: RootState) => state.game.gameOver;\n\nexport const selectSpeed = (state: RootState) => state.game.speed;\n\nexport default gameSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface ScoreState {\n    score: number,\n}\n\nconst initialState: ScoreState = {\n    score: 0,\n};\n\nexport const scoreSlice = createSlice({\n    name: 'score',\n    initialState,\n    reducers: {\n        addScore: (state: ScoreState, action: PayloadAction<number>) => {\n            state.score += action.payload;\n        },\n        resetScore: state => {\n            state.score = 0;\n        },\n    }\n});\n\nexport const { addScore, resetScore } = scoreSlice.actions;\n\nexport const selectScore = (state: RootState) => state.score.score;\n\nexport default scoreSlice.reducer;\n","import { Action, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport areaReducer from '../components/Area/Field/field-slice';\nimport gameReducer from '../components/Area/Field/game-slice';\nimport scoreReducer from '../components/Score/score-slice';\n\nexport const store = configureStore({\n  reducer: {\n    field: areaReducer,\n    game: gameReducer,\n    score: scoreReducer,\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false,\n  })\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","export class ScoreCalculator {\n    public getAdditionalScore(speed: number): number {\n        return speed * 10;\n    }\n}\n","import { store } from '../app/store';\nimport { Repeater } from 'essents';\nimport { initField, tickField } from '../components/Area/Field/field-slice';\nimport { GameOver } from '../errors/game-over';\nimport { changeSpeed, endGame, startGame } from '../components/Area/Field/game-slice';\nimport { ScoreCalculator } from './score-calculator';\nimport { addScore, resetScore } from '../components/Score/score-slice';\n\nexport class RunnerUtils {\n    public selectLength(): number {\n        return store.getState().field.area.snake.body.length;\n    }\n\n    public selectSpeed(): number {\n        return store.getState().game.speed;\n    }\n\n    public chooseSpeed() {\n        const length = this.selectLength();\n\n        return 1 + ((length / 4) | 0);\n    }\n}\n\nexport class GameRunner {\n    public utils: RunnerUtils = new RunnerUtils();\n\n    public readonly defaultPeriod = 750;\n\n    public period: number = null;\n\n    public repeater: Repeater = null;\n\n    public previousLength: number = null;\n\n    public init(): void {\n        store.dispatch(initField());\n        store.dispatch(resetScore());\n        this.previousLength = this.utils.selectLength();\n    }\n\n    public run(): void {\n        this.repeater = new Repeater(() => this.iteration(), this.period ?? this.defaultPeriod).start();\n    }\n\n    public startGame(): void {\n        store.dispatch(startGame())\n        this.run();\n    }\n\n    public iteration(): void {\n        const speed = this.utils.selectSpeed();\n        const newSpeed = this.utils.chooseSpeed();\n        const length = this.utils.selectLength();\n\n        if (this.previousLength !== length) {\n            this.changeScore(speed);\n        }\n        if (speed !== newSpeed) {\n            this.changeSpeed(newSpeed);\n        }\n\n        this.previousLength = length;\n\n        try {\n            store.dispatch(tickField())\n        } catch (e) {\n            if (e instanceof GameOver) {\n                store.dispatch(endGame(e.message));\n                this.stop();\n                this.init();\n            }\n        }\n    }\n\n    public changeScore(speed: number): void {\n        const score = new ScoreCalculator().getAdditionalScore(speed);\n        store.dispatch(addScore(score));\n    }\n\n    public changeSpeed(newSpeed: number): void {\n        this.stop()\n        this.period = Math.pow(0.9, newSpeed) * this.defaultPeriod;\n        store.dispatch(changeSpeed(newSpeed));\n        this.run();\n    }\n\n    public stop(): void {\n        this.repeater.kill();\n    }\n}\n","import { fromEvent, merge, Observable, Subject } from 'rxjs';\nimport { CellDirection } from '../models/cell-direction';\nimport { distinctUntilChanged, map, takeUntil } from 'rxjs/operators';\nimport { turnDown, turnLeft, turnRight, turnUp } from '../components/Area/Field/field-slice';\nimport { store } from '../app/store';\n\nexport class SnakeController {\n    public moves$: Observable<CellDirection>;\n\n    private keyPress$: Observable<CellDirection>;\n    private controllerChange$ = new Subject<CellDirection>();\n\n    private dead$ = new Subject<void>();\n\n    public init(): void {\n        this.keyPress$ = this.subscribeToKeys();\n\n        this.moves$ = merge(\n            this.keyPress$,\n            this.controllerChange$\n        ).pipe(\n            distinctUntilChanged((first, second) => first === second),\n            takeUntil(this.dead$),\n        )\n\n        this.moves$.subscribe((direction: CellDirection) => {\n            switch (direction) {\n                case CellDirection.Up: {\n                    store.dispatch(turnUp());\n                    break;\n                }\n                case CellDirection.Down: {\n                    store.dispatch(turnDown());\n                    break;\n                }\n                case CellDirection.Right: {\n                    store.dispatch(turnRight());\n                    break;\n                }\n                case CellDirection.Left: {\n                    store.dispatch(turnLeft());\n                    break;\n                }\n            }\n        });\n    }\n\n    private subscribeToKeys(): Observable<CellDirection> {\n        return fromEvent<KeyboardEvent>(document, 'keydown').pipe(\n            map(item => item.key),\n            map(item => {\n                switch (item) {\n                    case \"ArrowUp\":\n                        return CellDirection.Up;\n                    case \"ArrowDown\":\n                        return CellDirection.Down;\n                    case \"ArrowRight\":\n                        return CellDirection.Right;\n                    case \"ArrowLeft\":\n                        return CellDirection.Left;\n                }\n            }),\n        );\n    }\n\n    public turnUp(): void {\n        this.controllerChange$.next(CellDirection.Up)\n    }\n\n    public turnRight(): void {\n        this.controllerChange$.next(CellDirection.Right)\n    }\n\n    public turnDown(): void {\n        this.controllerChange$.next(CellDirection.Down)\n    }\n\n    public turnLeft(): void {\n        this.controllerChange$.next(CellDirection.Left)\n    }\n\n    public unsubscribe(): void {\n        this.dead$.next();\n        this.dead$.complete();\n    }\n}\n","import React from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { selectScore } from './score-slice';\nimport { selectSnakeLength } from '../Area/Field/field-slice';\nimport { selectSpeed } from '../Area/Field/game-slice';\n\nexport default function Score() {\n    const score = useAppSelector(selectScore);\n    const length = useAppSelector(selectSnakeLength);\n    const speed = useAppSelector(selectSpeed);\n\n    return (\n        <div className=\"app-score\">\n            <div className=\"score-info\">\n                <label className=\"score-info__header\">\n                    Score\n                </label>\n                <div className=\"score-info__value\">\n                    {score}\n                </div>\n            </div>\n            <div className=\"snake-speed-info\">\n                <label className=\"snake-speed-info__header\">\n                    Speed\n                </label>\n                <div className=\"snake-speed-info__value\">\n                    {speed}\n                </div>\n            </div>\n            <div className=\"snake-length-info\">\n                <label className=\"snake-length-info__header\">\n                    Length\n                </label>\n                <div className=\"snake-length-info__value\">\n                    {length}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect } from 'react';\nimport Field from './components/Area/Field/field';\nimport { useAppSelector } from './app/hooks';\nimport Controller from './components/Controller/Controller';\nimport { selectGameOvered, selectGameStarted } from './components/Area/Field/game-slice';\nimport { GameRunner } from './utils/game-runner';\nimport { SnakeController } from './utils/snake-controller';\nimport Score from './components/Score/Score';\n\nconst gameRunner = new GameRunner();\nconst controller = new SnakeController();\n\nfunction App() {\n    useEffect(() => {\n        controller.init();\n    })\n\n    const started = useAppSelector(selectGameStarted);\n    const gameOver = useAppSelector(selectGameOvered);\n    return (\n        <div className=\"App\">\n            <div className=\"app-game-place\">\n                <Field/>\n                {\n                    started ? <Score/> : null\n                }\n            </div>\n            {\n                !started ? (\n                    <button\n                        className=\"start-game\"\n                        onClick={() => {\n                            gameRunner.startGame();\n                        }}\n                    >\n                        Start\n                    </button>\n                ) : (\n                    <Controller\n                        onUpMove={() => controller.turnUp()}\n                        onRightMove={() => controller.turnRight()}\n                        onDownMove={() => controller.turnDown()}\n                        onLeftMove={() => controller.turnLeft()}\n                    />\n                )\n            }\n            {\n                gameOver ?\n                    <span>{gameOver}</span> :\n                    null\n            }\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.scss';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}