{"version":3,"sources":["models/cell-direction.ts","app/hooks.ts","models/snake.ts","errors/game-over.ts","models/area.ts","components/Area/Field/fieldSlice.ts","components/Area/Cell/Cell.tsx","components/Area/Field/Field.tsx","app/store.ts","components/Area/Controller/Controller.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CellDirection","useAppSelector","useSelector","Snake","body","Up","this","_","first","last","head","Down","Left","Right","isVertical","turnSnake","isHorizontal","append","toArray","skipLast","prepend","direction","skip","GameOver","message","Error","PositionComparator","second","entity","initialState","area","height","width","args","snake","snakeCells","foodCells","snakePosition","rnd","Random","getSnakeCells","length","generateRandomFreeCell","nextCell","getNextSnakePosition","checkBounds","isSnakeCell","equals","snakeTail","move","isFoodCell","grow","where","cell","Area","up","right","down","left","contains","next","position","x","y","coord","snakeHeadDirection","coords","i","getNextSectionCoord","push","section","gameStarted","speed","fieldSlice","createSlice","name","reducers","turnUp","state","turnRight","turnDown","turnLeft","tick","startGame","changeSpeed","action","payload","actions","selectArea","field","selectGameStarted","selectIsSnakeCell","createSelector","selectIsFoodCell","Cell","props","isSnakeSelector","isFoodSelector","isSnake","cellIndex","rowIndex","isFood","cellClasses","classNames","className","renderArray","range","select","Field","map","row","renderRow","store","configureStore","reducer","areaReducer","Controller","onMouseDown","bind","onMouseMove","onMouseUp","merge","fromEvent","document","subscribe","e","pipe","debounceTime","screenX","touches","screenY","setState","xDiff","yDiff","Math","abs","onLeftMove","onRightMove","onDownMove","onUpMove","onTouchStart","React","Component","defaultInterval","selectSpeed","getState","chooseSpeed","repeater","setRepeater","started","period","Repeater","newSpeed","kill","pow","dispatch","start","keyDown$","item","key","controllerChange$","Subject","turn$","distinctUntilChanged","App","useEffect","useDispatch","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"uJAAYA,E,kECKCC,EAAkDC,I,mEDLnDF,K,QAAAA,E,cAAAA,E,YAAAA,E,aAAAA,M,KEGL,IAAMG,EAAb,WAKI,aAAgE,IAA7CC,EAA4C,uDAApB,CAACJ,EAAcK,IAAK,yBAJ/CD,UAI+C,EAC3DE,KAAKF,KAAOA,EANpB,sCASI,WACI,OAAOG,IAAED,KAAKF,MAAMI,UAV5B,gBAaI,WACI,OAAOD,IAAED,KAAKF,MAAMK,SAd5B,sBAiBI,WACI,OAAOH,KAAKI,OAASV,EAAcK,IAAMC,KAAKI,OAASV,EAAcW,OAlB7E,wBAqBI,WACI,OAAOL,KAAKI,OAASV,EAAcY,MAAQN,KAAKI,OAASV,EAAca,QAtB/E,gBAyBI,WACI,OAAIP,KAAKQ,WACER,KACGA,KAAKS,UAAUf,EAAcK,MA5BnD,mBA+BI,WACI,OAAIC,KAAKU,aACEV,KACGA,KAAKS,UAAUf,EAAca,SAlCnD,kBAqCI,WACI,OAAIP,KAAKQ,WACER,KACGA,KAAKS,UAAUf,EAAcW,QAxCnD,kBA2CI,WACI,OAAIL,KAAKU,aACEV,KACGA,KAAKS,UAAUf,EAAcY,QA9CnD,kBAiDI,WAEI,OAAO,IAAIT,EADKI,IAAED,KAAKF,MAAMa,OAAOX,KAAKG,MAAMS,aAlDvD,kBAsDI,WAEI,OAAO,IAAIf,EADKI,IAAED,KAAKF,MAAMe,SAAS,GAAGC,QAAQd,KAAKI,MAAMQ,aAvDpE,uBA2DI,SAAkBG,GAEd,OAAO,IAAIlB,EADKI,IAAED,KAAKF,MAAMkB,KAAK,GAAGF,QAAQC,GAAWH,eA5DhE,K,wBCHaK,EAAb,kDACI,WAAmBC,GAAmB,uCAC5BA,GAFd,sBAA8BC,Q,QCcxBC,E,uFACF,SAAQlB,EAAiBmB,GACrB,OAAInB,EAAM,GAAKmB,EAAO,GACX,EACAnB,EAAM,GAAKmB,EAAO,IACjB,EAEDnB,EAAM,GAAKmB,EAAO,K,oBAIjC,SAAOnB,EAAiBmB,GACpB,OAAOnB,EAAM,KAAOmB,EAAO,IAAMnB,EAAM,KAAOmB,EAAO,K,yBAGzD,SAAYC,GACR,OAAQA,EAAO,GAAK,OAASA,EAAO,GAAK,S,KCpB3CC,EAA2B,CAC7BC,KAAM,IDuBV,WAsBI,WAAmBC,EAAgBC,EAAeC,GAAkB,IAAD,+BArBnDF,YAqBmD,OApBnDC,WAoBmD,OAlBnDE,WAkBmD,OAhBnDC,gBAgBmD,OAf5DC,eAe4D,OAbnDC,mBAamD,OAXlDC,IAAc,IAAIC,SAY/BjC,KAAKyB,OAASA,EACdzB,KAAK0B,MAAQA,EAEb1B,KAAK4B,MAAL,iBAAaD,QAAb,IAAaA,OAAb,EAAaA,EAAMC,aAAnB,QAA4B,IAAI/B,EAChCG,KAAK+B,cAAL,iBAAqBJ,QAArB,IAAqBA,OAArB,EAAqBA,EAAMI,qBAA3B,QAA4C,CACvCN,EAAS,EAAK,EACdC,EAAQ,EAAK,GAGlB1B,KAAK6B,WAAa7B,KAAKkC,gBAEvBlC,KAAK8B,WAAgB,OAAJH,QAAI,IAAJA,GAAA,UAAAA,EAAMG,iBAAN,eAAiBK,QAASR,EAAKG,UAAY,CAAC9B,KAAKoC,0BAlC1E,oDAaI,WACI,OAAOpC,KAAK4B,MAAMxB,OAd1B,qBAgBI,WACI,OAAOH,IAAED,KAAK6B,YAAY1B,SAjBlC,kBAqCI,WACI,IAAMkC,EAAWrC,KAAKsC,uBAEtB,IAAKtC,KAAKuC,YAAYF,GAClB,MAAM,IAAIpB,EAAS,yBAGvB,GAAIjB,KAAKwC,YAAYH,MAAc,IAAIjB,GAAqBqB,OAAOJ,EAAUrC,KAAK0C,WAC9E,MAAM,IAAIzB,EAAS,wBAGvB,IAAIW,EAAQ5B,KAAK4B,MAAMe,OAQvB,OANI3C,KAAK4C,WAAWP,KAChBT,EAAQA,EAAMiB,OAEd7C,KAAK8B,UAAY7B,IAAED,KAAK8B,WAAWgB,OAAM,SAACC,GAAD,QAAW,IAAI3B,GAAqBqB,OAAOJ,EAAUU,MAAOnC,WAGlG,IAAIoC,EACPhD,KAAKyB,OACLzB,KAAK0B,MACL,CACIE,MAAOA,EACPG,cAAeM,EACfP,UAAW9B,KAAK8B,cA9DhC,oBAmEI,WACI,OAAO,IAAIkB,EACPhD,KAAKyB,OACLzB,KAAK0B,MACL,CACIE,MAAO5B,KAAK4B,MAAMqB,KAClBlB,cAAe/B,KAAK+B,cACpBD,UAAW9B,KAAK8B,cA1EhC,uBA+EI,WACI,OAAO,IAAIkB,EACPhD,KAAKyB,OACLzB,KAAK0B,MACL,CACIE,MAAO5B,KAAK4B,MAAMsB,QAClBnB,cAAe/B,KAAK+B,cACpBD,UAAW9B,KAAK8B,cAtFhC,sBA2FI,WACI,OAAO,IAAIkB,EACPhD,KAAKyB,OACLzB,KAAK0B,MACL,CACIE,MAAO5B,KAAK4B,MAAMuB,OAClBpB,cAAe/B,KAAK+B,cACpBD,UAAW9B,KAAK8B,cAlGhC,sBAuGI,WACI,OAAO,IAAIkB,EACPhD,KAAKyB,OACLzB,KAAK0B,MACL,CACIE,MAAO5B,KAAK4B,MAAMwB,OAClBrB,cAAe/B,KAAK+B,cACpBD,UAAW9B,KAAK8B,cA9GhC,yBAmHI,SAAmBiB,GACf,OAAQ9C,IAAED,KAAK6B,YAAYwB,SAASN,EAAM,IAAI3B,KApHtD,wBAuHI,SAAkB2B,GACd,OAAQ9C,IAAED,KAAK8B,WAAWuB,SAASN,EAAM,IAAI3B,KAxHrD,oCA2HI,WACI,IAAI2B,EAAiB,KAErB,EAAG,CAICA,EAAO,CAHG/C,KAAKgC,IAAIsB,KAAKtD,KAAK0B,OACnB1B,KAAKgC,IAAIsB,KAAKtD,KAAKyB,eAGxBzB,KAAKwC,YAAYO,IAE1B,OAAOA,IArIf,yBAwII,SAAmBQ,GACf,kBAAeA,EAAf,GAAOC,EAAP,KAAUC,EAAV,KACA,QAAID,EAAI,GAAKA,GAAKxD,KAAK0B,UAEZ+B,EAAI,GAAKA,GAAKzD,KAAKyB,UA5ItC,kCAmJI,WACI,IAAMiC,EAAQ1D,KAAK+B,cAEnB,OAAQ/B,KAAK2D,oBACT,KAAKjE,EAAcK,GAAI,MAAO,CAAC2D,EAAM,GAAIA,EAAM,GAAK,GACpD,KAAKhE,EAAca,MAAO,MAAO,CAACmD,EAAM,GAAK,EAAGA,EAAM,IACtD,KAAKhE,EAAcW,KAAM,MAAO,CAACqD,EAAM,GAAIA,EAAM,GAAK,GACtD,KAAKhE,EAAcY,KAAM,MAAO,CAACoD,EAAM,GAAK,EAAGA,EAAM,OA1JjE,2BA8JI,WAKI,IAJA,IAAME,EAAS,CAAC5D,KAAK+B,eAEjB5B,EAAOH,KAAK+B,cAEP8B,EAAI,EAAGA,EAAI7D,KAAK4B,MAAM9B,KAAKqC,OAAQ0B,IACxC1D,EAAOH,KAAK8D,oBAAoB3D,EAAMH,KAAK4B,MAAM9B,KAAK+D,IACtDD,EAAOG,KAAK5D,GAGhB,OAAOyD,IAxKf,iCA2KI,SAA4BF,EAAiBM,GACzC,OAAQA,GACJ,KAAKtE,EAAcK,GAAI,MAAO,CAAC2D,EAAM,GAAIA,EAAM,GAAK,GACpD,KAAKhE,EAAca,MAAO,MAAO,CAACmD,EAAM,GAAK,EAAGA,EAAM,IACtD,KAAKhE,EAAcW,KAAM,MAAO,CAACqD,EAAM,GAAIA,EAAM,GAAK,GACtD,KAAKhE,EAAcY,KAAM,MAAO,CAACoD,EAAM,GAAK,EAAGA,EAAM,SAhLjE,KCvBU,CAAS,GAAI,IACnBO,aAAa,EACbC,MAAO,GAKEC,EAAaC,YAAY,CAClCC,KAAM,QACN9C,eAEA+C,SAAU,CACNC,OAAQ,SAACC,GACLA,EAAMhD,KAAOgD,EAAMhD,KAAK+C,UAE5BE,UAAW,SAACD,GACRA,EAAMhD,KAAOgD,EAAMhD,KAAKiD,aAE5BC,SAAU,SAACF,GACPA,EAAMhD,KAAOgD,EAAMhD,KAAKkD,YAE5BC,SAAU,SAACH,GACPA,EAAMhD,KAAOgD,EAAMhD,KAAKmD,YAE5BC,KAAM,SAACJ,GACHA,EAAMhD,KAAOgD,EAAMhD,KAAKoD,QAE5BC,UAAW,SAACL,GACRA,EAAMP,aAAc,GAExBa,YAAa,SAACN,EAAOO,GACjBP,EAAMN,MAAQa,EAAOC,YAM1B,EAAmEb,EAAWc,QAAtEV,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,UAAWC,EAA3B,EAA2BA,SAAUC,EAArC,EAAqCA,SAAUC,EAA/C,EAA+CA,KAAMC,EAArD,EAAqDA,UAG/CK,EAAa,SAACV,GAAD,OAAsBA,EAAMW,MAAM3D,MAE/C4D,EAAoB,SAACZ,GAAD,OAAsBA,EAAMW,MAAMlB,aAItDoB,EAAoBC,YAC7BJ,GACA,SAAC1D,GAAD,OAAgB,SAAC+B,GAAD,OAAgC/B,EAAKgB,YAAYe,OAGxDgC,EAAmBD,YAC5BJ,GACA,SAAC1D,GAAD,OAAgB,SAAC+B,GAAD,OAAgC/B,EAAKoB,WAAWW,OAGrDY,IAAf,Q,OCzDe,SAASqB,EAAKC,GACzB,IAAOC,EAAkB/F,EAAe0F,GACjCM,EAAiBhG,EAAe4F,GAEjCK,EAAUF,EAAgB,CAACD,EAAMI,UAAWJ,EAAMK,WAClDC,EAASJ,EAAe,CAACF,EAAMI,UAAWJ,EAAMK,WAEhDE,EAAcC,IAAW,CAC3B,YAAY,EACZ,aAAcL,EACd,YAAaG,IAGjB,OACI,qBAAKG,UAAWF,EAAhB,e,WCnBFG,EAAclG,IAAEmG,MAAM,EAAG,IAAIC,QAAO,kBAAMpG,IAAEmG,MAAM,EAAG,IAAIxF,aAAWA,UAQ3D,SAAS0F,IACpB,OACI,qBAAKJ,UAAU,YAAf,SAEQC,EAAYI,KAAI,SAACC,EAAKV,GAAN,OAVhC,SAAmBU,EAAiBV,GAChC,OAAOU,EAAID,KAAI,SAACxD,EAAM8C,GAAP,OACX,cAACL,EAAD,CAAMM,SAAUA,EAAUD,UAAWA,OAQMY,CAAUD,EAAKV,QCd3D,IAAMY,EAAQC,YAAe,CAClCC,QAAS,CACPzB,MAAO0B,K,4CCcUC,E,kDAEjB,WAAYrB,GAAe,IAAD,8BACtB,cAAMA,IAEDjB,MAAQ,CACThB,EAAG,KACHC,EAAG,KACH1C,UAAW,MAGf,EAAKgG,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBAXK,E,qDAc1B,WAA4B,IAAD,OACvBG,YACIC,YAAUC,SAAU,WACpBD,YAAUC,SAAU,aACtBC,WAAU,SAACC,GAAD,OAAO,EAAKL,eAExBC,YACIC,YAAUC,SAAU,aACpBD,YAAUC,SAAU,cACtBG,KAAKC,YAAa,MAAMH,WAAU,SAACC,GAAD,OAAO,EAAKN,YAAYM,Q,yBAGhE,SAAmBA,GAAS,IAAD,IACjB/D,EAAC,UAAG+D,EAAEG,eAAL,QAAgBH,EAAEI,QAAQ,GAAGD,QAC9BjE,EAAC,UAAG8D,EAAEK,eAAL,QAAgBL,EAAEI,QAAQ,GAAGC,QAEpC5H,KAAK6H,UAAS,iBAAO,CAAErE,IAAGC,U,yBAG9B,SAAmB8D,GAAS,IAAD,IACvB,EAAiBvH,KAAKwE,MAAdhB,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAEX,GAAKD,GAAMC,EAAX,CAEA,IAGMqE,EAAQtE,GAHD,UAAG+D,EAAEG,eAAL,QAAgBH,EAAEI,QAAQ,GAAGD,SAIpCK,EAAQtE,GAHD,UAAG8D,EAAEK,eAAL,QAAgBL,EAAEI,QAAQ,GAAGC,SAKtCI,KAAKC,IAAIH,GAASE,KAAKC,IAAIF,IAAUD,EAAQ,GAC7C9H,KAAKyF,MAAMyC,aACXlI,KAAK6H,UAAS,iBAAO,CAAE9G,UAAW,YAC3BiH,KAAKC,IAAIH,GAASE,KAAKC,IAAIF,IAAUD,EAAQ,GACpD9H,KAAKyF,MAAM0C,cACXnI,KAAK6H,UAAS,iBAAO,CAAE9G,UAAW,aAC3BiH,KAAKC,IAAIH,GAASE,KAAKC,IAAIF,IAAUA,EAAQ,GACpD/H,KAAKyF,MAAM2C,aACXpI,KAAK6H,UAAS,iBAAO,CAAE9G,UAAW,YAC3BiH,KAAKC,IAAIH,GAASE,KAAKC,IAAIF,IAAUA,EAAQ,IACpD/H,KAAKyF,MAAM4C,WACXrI,KAAK6H,UAAS,iBAAO,CAAE9G,UAAW,a,uBAI1C,WACIf,KAAK6H,UAAS,iBAAO,CAAErE,EAAG,KAAMC,EAAG,KAAM1C,UAAW,W,oBAGxD,WACI,OACI,sBACImF,UAAWD,IAAW,iBAAkBjG,KAAKwE,MAAMzD,WADvD,UAGI,qBAAKmF,UAAU,oCAAf,eACA,qBAAKA,UAAU,sCAAf,eACA,qBAAKA,UAAU,uCAAf,eACA,qBAAKA,UAAU,qCAAf,eACA,qBAAKA,UAAU,qCAAf,SACI,qBAAKA,UAAU,iCACVa,YAAa/G,KAAK+G,YAClBuB,aAActI,KAAK+G,YAFxB,wB,GA3EoBwB,IAAMC,W,0BCAxCC,EAAkB,IAMxB,SAASC,KACL,OAAOhC,EAAMiC,WAAWxD,MAAMjB,MAGlC,SAAS0E,KAGL,OAAO,GAVAlC,EAAMiC,WAAWxD,MAAM3D,KAAKI,MAAM9B,KAAKqC,OAUxB,EAAK,GAG/B,IAAI0G,GAAqB,KAEzB,SAASC,GAAYC,GAAyD,IAAvCC,EAAsC,uDAA7BP,EAC5C,OAAIM,GACAF,GAAW,IAAII,YACX,WACI,IAAM/E,EAAQwE,KACRQ,EAAWN,KAEb1E,IAAUgF,IACVL,GAASM,OAETL,GAAYC,EAASf,KAAKoB,IAAI,GAAKF,GAAYT,IAGnD/B,EAAM2C,SAASzE,OAEnBoE,GACFM,QAEK,kBAAMT,GAASM,SAEf,aAKf,IAAMI,GAAWnC,YAAyBC,SAAU,WAAWG,KAC3DC,YAAa,KACblB,aAAI,SAAAiD,GAAI,OAAIA,EAAKC,OACjBlD,aAAI,SAAAiD,GACA,OAAQA,GACJ,IAAK,UACD,OAAO9J,EAAcK,GACzB,IAAK,YACD,OAAOL,EAAcW,KACzB,IAAK,aACD,OAAOX,EAAca,MACzB,IAAK,YACD,OAAOb,EAAcY,UAK/BoJ,GAAoB,IAAIC,IAExBC,GAAQzC,YAAMoC,GAAUG,IAAmBlC,KAAKqC,aAAqB,SAAC3J,EAAOmB,GAAR,OAAmBnB,IAAUmB,MAyDzFyI,OAvDf,WACIC,qBAAU,WACNH,GAAMtC,WAAU,SAACvG,GACb,OAAQA,GACJ,KAAKrB,EAAcK,GACf2G,EAAM2C,SAAS9E,KACf,MAEJ,KAAK7E,EAAcW,KACfqG,EAAM2C,SAAS3E,KACf,MAEJ,KAAKhF,EAAca,MACfmG,EAAM2C,SAAS5E,KACf,MAEJ,KAAK/E,EAAcY,KACfoG,EAAM2C,SAAS1E,YAO/B,IAAMoE,EAAUpJ,EAAeyF,GACzBiE,ETxG0BW,cS8GhC,OAJAD,qBAAU,WACN,OAAOjB,GAAYC,MAInB,sBAAK7C,UAAU,MAAf,UACI,cAAC,EAAD,IAEK6C,EAQG,cAAC,EAAD,CACIX,WAAY,kBAAMsB,GAAkBpG,KAAK5D,EAAcW,OACvD6H,WAAY,kBAAMwB,GAAkBpG,KAAK5D,EAAcY,OACvD+H,SAAU,kBAAMqB,GAAkBpG,KAAK5D,EAAcK,KACrDoI,YAAa,kBAAMuB,GAAkBpG,KAAK5D,EAAca,UAX5D,wBACI2F,UAAU,aACV+D,QAAS,kBAAMZ,EAASxE,MAF5B,uBC3GAqF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU/D,MAAOA,EAAjB,SACI,cAAC,GAAD,QAGNW,SAASqD,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAMhK,a","file":"static/js/main.5f4147d4.chunk.js","sourcesContent":["export enum CellDirection {\n    Up = 'Up',\n    Right = 'Right',\n    Down = 'Down',\n    Left = 'Left',\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { AppDispatch, RootState } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { CellDirection } from './cell-direction';\nimport _ from 'declarray';\n\nexport class Snake {\n    public readonly body: CellDirection[];\n\n    public constructor();\n    public constructor(body: CellDirection[]);\n    public constructor(body: CellDirection[] = [CellDirection.Up]) {\n        this.body = body;\n    }\n\n    public get head(): CellDirection {\n        return _(this.body).first();\n    }\n\n    public get last(): CellDirection {\n        return _(this.body).last();\n    }\n\n    public get isVertical(): boolean {\n        return this.head === CellDirection.Up || this.head === CellDirection.Down;\n    }\n\n    public get isHorizontal(): boolean {\n        return this.head === CellDirection.Left || this.head === CellDirection.Right;\n    }\n\n    public up(): Snake {\n        if (this.isVertical) {\n            return this;\n        } else return this.turnSnake(CellDirection.Up)\n    }\n\n    public right(): Snake {\n        if (this.isHorizontal) {\n            return this;\n        } else return this.turnSnake(CellDirection.Right)\n    }\n\n    public down(): Snake {\n        if (this.isVertical) {\n            return this;\n        } else return this.turnSnake(CellDirection.Down)\n    }\n\n    public left(): Snake {\n        if (this.isHorizontal) {\n            return this;\n        } else return this.turnSnake(CellDirection.Left)\n    }\n\n    public grow(): Snake {\n        const newBody = _(this.body).append(this.last).toArray();\n        return new Snake(newBody);\n    }\n\n    public move(): Snake {\n        const newBody = _(this.body).skipLast(1).prepend(this.head).toArray();\n        return new Snake(newBody);\n    }\n\n    private turnSnake(direction: CellDirection): Snake {\n        const newBody = _(this.body).skip(1).prepend(direction).toArray();\n        return new Snake(newBody);\n    }\n}\n","export class GameOver extends Error {\n    public constructor(message?: string) {\n        super(message);\n    }\n}\n","import { Snake } from './snake';\nimport { CellDirection } from './cell-direction';\nimport _, { IEqualityComparator } from 'declarray';\nimport { GameOver } from '../errors/game-over';\nimport { Random } from 'essents';\n\ndeclare type Position = [number, number];\n\ninterface AreaArgs {\n    snake?: Snake;\n    snakePosition?: Position;\n    foodCells?: Position[];\n}\n\nclass PositionComparator implements IEqualityComparator<Position> {\n    compare(first: Position, second: Position): number {\n        if (first[0] > second[0]) {\n            return 1;\n        } else if (first[0] < second[0]) {\n            return -1;\n        } else {\n            return first[1] - second[1];\n        }\n    }\n\n    equals(first: Position, second: Position): boolean {\n        return first[0] === second[0] && first[1] === second[1];\n    }\n\n    getHashCode(entity: Position): number {\n        return (entity[0] + 1024) * (entity[1] + 512)\n    }\n}\n\nexport class Area {\n    public readonly height: number;\n    public readonly width: number;\n\n    public readonly snake: Snake;\n\n    public readonly snakeCells: Position[];\n    public foodCells: Position[];\n\n    public readonly snakePosition: Position;\n\n    private readonly rnd: Random = new Random();\n\n    private get snakeHeadDirection(): CellDirection {\n        return this.snake.head;\n    }\n    private get snakeTail(): Position {\n        return _(this.snakeCells).last();\n    }\n\n    public constructor(height: number, width: number);\n    public constructor(height: number, width: number, args: AreaArgs);\n    public constructor(height: number, width: number, args?: AreaArgs) {\n        this.height = height;\n        this.width = width;\n\n        this.snake = args?.snake ?? new Snake();\n        this.snakePosition = args?.snakePosition ?? [\n            (height / 2) | 0,\n            (width / 2) | 0,\n        ];\n\n        this.snakeCells = this.getSnakeCells();\n\n        this.foodCells = args?.foodCells?.length ? args.foodCells : [this.generateRandomFreeCell()];\n    }\n\n    public tick(): Area {\n        const nextCell = this.getNextSnakePosition();\n\n        if (!this.checkBounds(nextCell)) {\n            throw new GameOver('You break area beyond');\n        }\n\n        if (this.isSnakeCell(nextCell) && !new PositionComparator().equals(nextCell, this.snakeTail)) {\n            throw new GameOver('You did eat yourself');\n        }\n\n        let snake = this.snake.move();\n\n        if (this.isFoodCell(nextCell)) {\n            snake = snake.grow();\n\n            this.foodCells = _(this.foodCells).where((cell) => !new PositionComparator().equals(nextCell, cell)).toArray();\n        }\n\n        return new Area(\n            this.height,\n            this.width,\n            {\n                snake: snake,\n                snakePosition: nextCell,\n                foodCells: this.foodCells,\n            }\n        )\n    }\n\n    public turnUp(): Area {\n        return new Area(\n            this.height,\n            this.width,\n            {\n                snake: this.snake.up(),\n                snakePosition: this.snakePosition,\n                foodCells: this.foodCells,\n            }\n        )\n    }\n\n    public turnRight(): Area {\n        return new Area(\n            this.height,\n            this.width,\n            {\n                snake: this.snake.right(),\n                snakePosition: this.snakePosition,\n                foodCells: this.foodCells,\n            }\n        )\n    }\n\n    public turnDown(): Area {\n        return new Area(\n            this.height,\n            this.width,\n            {\n                snake: this.snake.down(),\n                snakePosition: this.snakePosition,\n                foodCells: this.foodCells,\n            }\n        )\n    }\n\n    public turnLeft(): Area {\n        return new Area(\n            this.height,\n            this.width,\n            {\n                snake: this.snake.left(),\n                snakePosition: this.snakePosition,\n                foodCells: this.foodCells,\n            }\n        )\n    }\n\n    public isSnakeCell(cell: Position): boolean {\n        return  _(this.snakeCells).contains(cell, new PositionComparator());\n    }\n\n    public isFoodCell(cell: Position): boolean {\n        return  _(this.foodCells).contains(cell, new PositionComparator());\n    }\n\n    public generateRandomFreeCell(): Position {\n        let cell: Position = null;\n\n        do {\n            const x = this.rnd.next(this.width);\n            const y = this.rnd.next(this.height);\n\n            cell = [x, y];\n        } while (this.isSnakeCell(cell))\n\n        return cell;\n    }\n\n    public checkBounds(position: Position): boolean {\n        const [x, y] = position;\n        if (x < 0 || x >= this.width) {\n            return false;\n        } else if (y < 0 || y >= this.height) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public getNextSnakePosition(): Position {\n        const coord = this.snakePosition;\n\n        switch (this.snakeHeadDirection) {\n            case CellDirection.Up: return [coord[0], coord[1] - 1];\n            case CellDirection.Right: return [coord[0] + 1, coord[1]];\n            case CellDirection.Down: return [coord[0], coord[1] + 1];\n            case CellDirection.Left: return [coord[0] - 1, coord[1]];\n        }\n    }\n\n    public getSnakeCells(): Position[] {\n        const coords = [this.snakePosition];\n\n        let last = this.snakePosition;\n\n        for (let i = 1; i < this.snake.body.length; i++) {\n            last = this.getNextSectionCoord(last, this.snake.body[i]);\n            coords.push(last);\n        }\n\n        return coords;\n    }\n\n    private getNextSectionCoord(coord: Position, section: CellDirection): Position {\n        switch (section) {\n            case CellDirection.Up: return [coord[0], coord[1] + 1];\n            case CellDirection.Right: return [coord[0] - 1, coord[1]];\n            case CellDirection.Down: return [coord[0], coord[1] - 1];\n            case CellDirection.Left: return [coord[0] + 1, coord[1]];\n        }\n    }\n}\n","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../../app/store';\nimport { Area } from '../../../models/area';\n\nexport interface FieldState {\n    area: Area,\n    gameStarted: boolean,\n    speed: number,\n}\n\nconst initialState: FieldState = {\n    area: new Area(31, 31),\n    gameStarted: false,\n    speed: 1,\n};\n\n\n// Slice configuration\nexport const fieldSlice = createSlice({\n    name: 'field',\n    initialState,\n\n    reducers: {\n        turnUp: (state) => {\n            state.area = state.area.turnUp();\n        },\n        turnRight: (state) => {\n            state.area = state.area.turnRight();\n        },\n        turnDown: (state) => {\n            state.area = state.area.turnDown();\n        },\n        turnLeft: (state) => {\n            state.area = state.area.turnLeft();\n        },\n        tick: (state) => {\n            state.area = state.area.tick();\n        },\n        startGame: (state) => {\n            state.gameStarted = true;\n        },\n        changeSpeed: (state, action: PayloadAction<number>) => {\n            state.speed = action.payload;\n        }\n    },\n});\n\n// Actions block\nexport const { turnUp, turnRight, turnDown, turnLeft, tick, startGame } = fieldSlice.actions;\n\n// Selectors\nexport const selectArea = (state: RootState) => state.field.area;\n\nexport const selectGameStarted = (state: RootState) => state.field.gameStarted;\n\nexport const selectSpeed = (state: RootState) => state.field.gameStarted;\n\nexport const selectIsSnakeCell = createSelector(\n    selectArea,\n    (area: Area) => (position: [number, number]) => area.isSnakeCell(position)\n);\n\nexport const selectIsFoodCell = createSelector(\n    selectArea,\n    (area: Area) => (position: [number, number]) => area.isFoodCell(position)\n);\n\nexport default fieldSlice.reducer;\n","import React from 'react';\nimport { useAppSelector } from '../../../app/hooks';\nimport classNames from 'classnames';\nimport { selectIsFoodCell, selectIsSnakeCell } from '../Field/fieldSlice';\n\ninterface Props {\n    rowIndex: number;\n    cellIndex: number;\n}\n\nexport default function Cell(props: Props) {\n    const  isSnakeSelector = useAppSelector(selectIsSnakeCell);\n    const  isFoodSelector = useAppSelector(selectIsFoodCell);\n\n    const isSnake = isSnakeSelector([props.cellIndex, props.rowIndex]);\n    const isFood = isFoodSelector([props.cellIndex, props.rowIndex]);\n\n    const cellClasses = classNames({\n        'app-cell': true,\n        'snake-cell': isSnake,\n        'food-cell': isFood,\n    });\n\n    return (\n        <div className={cellClasses}> </div>\n    )\n}\n","import React from 'react';\nimport _ from 'declarray';\nimport Cell from '../Cell/Cell';\nimport './Field.scss';\n\nconst renderArray = _.range(0, 30).select(() => _.range(0, 30).toArray()).toArray();\n\nfunction renderRow(row: Array<any>, rowIndex: number) {\n    return row.map((cell, cellIndex) => (\n        <Cell rowIndex={rowIndex} cellIndex={cellIndex}/>\n    ));\n}\n\nexport default function Field() {\n    return (\n        <div className=\"app-field\">\n            {\n                renderArray.map((row, rowIndex) => renderRow(row, rowIndex))\n            }\n        </div>\n    )\n}\n","import { Action, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport areaReducer from '../components/Area/Field/fieldSlice';\n\nexport const store = configureStore({\n  reducer: {\n    field: areaReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react';\nimport './Controller.scss';\nimport classNames from 'classnames';\nimport { fromEvent, merge } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\ninterface State {\n    x: number;\n    y: number;\n    direction: string;\n}\n\ninterface Props {\n    onUpMove: () => void;\n    onRightMove: () => void;\n    onDownMove: () => void;\n    onLeftMove: () => void;\n}\n\nexport default class Controller extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            x: null,\n            y: null,\n            direction: null,\n        }\n\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.onMouseUp = this.onMouseUp.bind(this);\n    }\n\n    public componentDidMount() {\n        merge(\n            fromEvent(document, 'mouseup'),\n            fromEvent(document, 'touchend'),\n        ).subscribe((e) => this.onMouseUp());\n\n        merge(\n            fromEvent(document, 'mousemove'),\n            fromEvent(document, 'touchmove'),\n        ).pipe(debounceTime(100)).subscribe((e) => this.onMouseMove(e as any));\n    }\n\n    public onMouseDown(e: any) {\n        const x = e.screenX ?? e.touches[0].screenX\n        const y = e.screenY ?? e.touches[0].screenY\n\n        this.setState(() => ({ x, y }))\n    }\n\n    public onMouseMove(e: any) {\n        const { x, y } = this.state;\n\n        if (!x || !y) return;\n\n        const screenX = e.screenX ?? e.touches[0].screenX\n        const screenY = e.screenY ?? e.touches[0].screenY\n\n        const xDiff = x - screenX;\n        const yDiff = y - screenY;\n\n        if (Math.abs(xDiff) > Math.abs(yDiff) && xDiff > 0) {\n            this.props.onLeftMove();\n            this.setState(() => ({ direction: 'left' }));\n        } else if (Math.abs(xDiff) > Math.abs(yDiff) && xDiff < 0) {\n            this.props.onRightMove();\n            this.setState(() => ({ direction: 'right' }));\n        } else if (Math.abs(xDiff) < Math.abs(yDiff) && yDiff < 0) {\n            this.props.onDownMove();\n            this.setState(() => ({ direction: 'down' }));\n        } else if (Math.abs(xDiff) < Math.abs(yDiff) && yDiff > 0) {\n            this.props.onUpMove();\n            this.setState(() => ({ direction: 'up' }));\n        }\n    }\n\n    public onMouseUp() {\n        this.setState(() => ({ x: null, y: null, direction: null }))\n    }\n\n    render() {\n        return (\n            <div\n                className={classNames(\"app-controller\", this.state.direction)}\n            >\n                <div className=\"app-controller__top arrow control\"> </div>\n                <div className=\"app-controller__right arrow control\"> </div>\n                <div className=\"app-controller__bottom arrow control\"> </div>\n                <div className=\"app-controller__left arrow control\"> </div>\n                <div className=\"app-controller__cursor-placeholder\">\n                    <div className=\"app-controller__cursor control\"\n                         onMouseDown={this.onMouseDown}\n                         onTouchStart={this.onMouseDown}\n                    > </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { useEffect } from 'react';\nimport Field from './components/Area/Field/Field';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport {\n    selectGameStarted,\n    startGame,\n    tick,\n    turnDown,\n    turnLeft,\n    turnRight,\n    turnUp\n} from './components/Area/Field/fieldSlice';\nimport { Repeater } from 'essents';\nimport { store } from './app/store';\nimport Controller from './components/Area/Controller/Controller';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\nimport { CellDirection } from './models/cell-direction';\n\nconst defaultInterval = 750;\n\nfunction selectLength(): number {\n    return store.getState().field.area.snake.body.length;\n}\n\nfunction selectSpeed(): number {\n    return store.getState().field.speed;\n}\n\nfunction chooseSpeed() {\n    const length = selectLength()\n\n    return 1 + ((length / 4) | 0);\n}\n\nlet repeater: Repeater = null;\n\nfunction setRepeater(started: boolean, period = defaultInterval): () => void {\n    if (started) {\n        repeater = new Repeater(\n            () => {\n                const speed = selectSpeed();\n                const newSpeed = chooseSpeed();\n\n                if (speed !== newSpeed) {\n                    repeater.kill();\n\n                    setRepeater(started, Math.pow(0.9, newSpeed) * defaultInterval);\n                }\n\n                store.dispatch(tick())\n            },\n            period\n        ).start();\n\n        return () => repeater.kill();\n    } else {\n        return () => {\n        };\n    }\n}\n\nconst keyDown$ = fromEvent<KeyboardEvent>(document, 'keydown').pipe(\n    debounceTime(100),\n    map(item => item.key),\n    map(item => {\n        switch (item) {\n            case \"ArrowUp\":\n                return CellDirection.Up;\n            case \"ArrowDown\":\n                return CellDirection.Down;\n            case \"ArrowRight\":\n                return CellDirection.Right;\n            case \"ArrowLeft\":\n                return CellDirection.Left;\n        }\n    }),\n);\n\nconst controllerChange$ = new Subject<CellDirection>();\n\nconst turn$ = merge(keyDown$, controllerChange$).pipe(distinctUntilChanged((first, second) => first === second));\n\nfunction App() {\n    useEffect(() => {\n        turn$.subscribe((direction: CellDirection) => {\n            switch (direction) {\n                case CellDirection.Up: {\n                    store.dispatch(turnUp());\n                    break;\n                }\n                case CellDirection.Down: {\n                    store.dispatch(turnDown());\n                    break;\n                }\n                case CellDirection.Right: {\n                    store.dispatch(turnRight());\n                    break;\n                }\n                case CellDirection.Left: {\n                    store.dispatch(turnLeft());\n                    break;\n                }\n            }\n        });\n    });\n\n    const started = useAppSelector(selectGameStarted);\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        return setRepeater(started);\n    });\n\n    return (\n        <div className=\"App\">\n            <Field/>\n            {\n                !started ? (\n                    <button\n                        className=\"start-game\"\n                        onClick={() => dispatch(startGame())}\n                    >\n                        Start\n                    </button>\n                ) : (\n                    <Controller\n                        onDownMove={() => controllerChange$.next(CellDirection.Down)}\n                        onLeftMove={() => controllerChange$.next(CellDirection.Left)}\n                        onUpMove={() => controllerChange$.next(CellDirection.Up)}\n                        onRightMove={() => controllerChange$.next(CellDirection.Right)}\n                    />\n                )\n            }\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.scss';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}